<!DOCTYPE html>
<html lang="en">
<head>
<title>Buffer Performance Test</title>
<meta charset="UTF-8">
<meta name="viewport" content="user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1">
<meta name="apple-mobile-web-app-capable" content="yes">
<script src="https://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js"></script>
<script src="https://rawgit.com/basementuniverse/tily/master/tily.min.js"></script>
<script>

window.addEventListener("load", function() {
	var tily = new Tily.Main(document.querySelector("#tily"), { showFPS: true }),
		hammer = new Hammer.Manager(document, { recognizers: [
			[Hammer.Pan],
			[Hammer.Pinch]
		] }),
		dragStart = null,
		pinchStart = null;
	
	// Handle input events
	hammer.on("panstart", function(e) {
		if (!tily.activeBuffer) { return; }
		var p = vec2.mul(vec2(e.center.x, e.center.y), window.devicePixelRatio);
		dragStart = vec2.add(tily.activeBuffer.offsetPixels, p);
	});
	hammer.on("panend", function(e) {
		dragStart = null;
	});
	hammer.on("pan", function(e) {
		if (!tily.activeBuffer || !dragStart) { return; }
		var p = vec2.mul(vec2(e.center.x, e.center.y), window.devicePixelRatio);
		tily.activeBuffer.moveOffset(dragStart.x - p.x, dragStart.y - p.y, { unit: "px" });
	});
	hammer.on("pinchstart", function(e) {
		if (!tily.activeBuffer) { return; }
		pinchStart = tily.activeBuffer.scale;
	});
	hammer.on("pinchend", function(e) {
		pinchStart = null;
	});
	hammer.on("pinch", function(e) {
		if (!tily.activeBuffer) { return; }
		tily.activeBuffer.zoom(pinchStart / e.scale);
	});
	window.addEventListener("wheel", function(e) {
		if (!tily.activeBuffer) { return; }
		tily.activeBuffer.zoom(tily.activeBuffer.scale + (e.deltaY > 0 ? 1 : -1), { time: 0.1 });
	});
	
	// Create a buffer with several layers and fill them with random characters
	var WIDTH = 1000,
		HEIGHT = 1000,
		COLOURS = ["red", "yellow", "lime", "green", "aqua", "blue", "fuchsia", "purple"];
	var buffer = new Tily.Buffer(WIDTH, HEIGHT, {
			maximumScale: Math.max(WIDTH, HEIGHT),
			initialScale: 32,
			clampCamera: true
		});
	
	// Get a random colour
	var randomColour = () => COLOURS[Math.randomIntBetween(0, COLOURS.length - 1)];
	
	// Create a randomised layer
	function createLayer() {
		var layer = new Tily.TileLayer(buffer);
		layer.background = randomColour();
		layer.foreground = randomColour();
		for (var x = 0; x < WIDTH; x++) {
			for (var y = 0; y < HEIGHT; y++) {
				if (Math.random() > 0.5) {
					layer.setTile(x, y, String.fromCharCode(Math.randomIntBetween(9632, 9727)));
				}
			}
		}
		return layer;
	}
	
	// Add some random layers
	buffer.addLayer(createLayer());
	buffer.addLayer(createLayer());
	buffer.addLayer(createLayer());
	tily.activateBuffer(buffer);
});

</script>
<style>

#tily {
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
}

</style>
</head>
<body>
	<canvas id="tily"></canvas>
</body>
</html>
