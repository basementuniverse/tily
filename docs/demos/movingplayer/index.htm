<!DOCTYPE html>
<html lang="en">
<head>
<title>Moving Player Demonstration</title>
<meta charset="UTF-8">
<meta name="viewport" content="user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1">
<meta name="apple-mobile-web-app-capable" content="yes">
<script src="https://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js"></script>
<script src="https://cdn.jsdelivr.net/gh/basementuniverse/tily@master/tily.min.js"></script>
<script src="scripts/maze.js"></script>
<script>

const randomBetween = (min, max) => Math.random() * (max - min) + min;
const randomIntBetween = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;

window.addEventListener("load", function() {
	var tily = new Tily.Main(document.querySelector("#tily")),
		hammer = new Hammer.Manager(document, { recognizers: [
			[Hammer.Tap],
			[Hammer.Pan],
			[Hammer.Pinch]
		] }),
		player = {
			position: vec2(),
			activeTile: null,
			moving: false
		},
		maze = null,
		dragStart = null,
		pinchStart = null;
	
	// Handle input events
	hammer.on("tap", function(e) {
		if (!tily.activeBuffer) { return; }
		var p = vec2.mul(vec2(e.center.x, e.center.y), window.devicePixelRatio);
		update(tily.activeBuffer.getPosition(p.x, p.y));
	});
	hammer.on("panstart", function(e) {
		if (!tily.activeBuffer) { return; }
		var p = vec2.mul(vec2(e.center.x, e.center.y), window.devicePixelRatio);
		dragStart = vec2.add(tily.activeBuffer.offsetPixels, p);
	});
	hammer.on("panend", function(e) {
		dragStart = null;
	});
	hammer.on("pan", function(e) {
		if (!tily.activeBuffer || !dragStart) { return; }
		var p = vec2.mul(vec2(e.center.x, e.center.y), window.devicePixelRatio);
		tily.activeBuffer.moveOffset(dragStart.x - p.x, dragStart.y - p.y, { unit: "px" });
	});
	hammer.on("pinchstart", function(e) {
		if (!tily.activeBuffer) { return; }
		pinchStart = tily.activeBuffer.scale;
	});
	hammer.on("pinchend", function(e) {
		pinchStart = null;
	});
	hammer.on("pinch", function(e) {
		if (!tily.activeBuffer) { return; }
		tily.activeBuffer.zoom(pinchStart / e.scale);
	});
	window.addEventListener("keydown", function(e) {
		switch (e.key) {
			case "ArrowUp": update(vec2.add(player.position, vec2(0, -1))); break;
			case "ArrowDown": update(vec2.add(player.position, vec2(0, 1))); break;
			case "ArrowLeft": update(vec2.add(player.position, vec2(-1, 0))); break;
			case "ArrowRight": update(vec2.add(player.position, vec2(1, 0))); break;
			default: break;
		}
	});
	window.addEventListener("wheel", function(e) {
		if (!tily.activeBuffer) { return; }
		tily.activeBuffer.zoom(tily.activeBuffer.scale + (e.deltaY > 0 ? 1 : -1), { time: 0.1 });
	});
	
	// Set up the game
	function initialise() {
		// Generate a maze
		maze = generateMaze(16, 16);
		
		// Create a buffer from the maze
		var mazeBuffer = new Tily.Buffer(maze.width, maze.height, {
				clampCamera: true,
				maximumScale: Math.max(maze.width, maze.height),
				initialScale: Math.max(maze.width, maze.height)
			}),
			pathLayer = new Tily.TileLayer(mazeBuffer),
			wallLayer = new Tily.TileLayer(mazeBuffer);
		pathLayer.background = "white";
		pathLayer.fill(" ", 0, 0, maze.width, maze.height);
		wallLayer.background = "#555";
		for (var x = 0; x < maze.width; x++) {
			for (var y = 0; y < maze.height; y++) {
				wallLayer.setTile(x, y, maze.tiles[x][y] == 1 ? " " : "");
			}
		}
		mazeBuffer.addLayer(pathLayer);
		mazeBuffer.addLayer(wallLayer);
		
		// Create an active tile for the player if there isn't one already
		if (!player.activeTile) {
			var playerTile = new Tily.ActiveTile(maze.entrance.x, maze.entrance.y, 3),
				playerTileLayer = new Tily.ActiveTileLayer(playerTile, playerTile);
			playerTileLayer.foreground = "green";
			playerTileLayer.text = String.fromCharCode(parseInt("263a", 16));
			playerTile.addLayer(playerTileLayer);
			player.activeTile = playerTile;
			player.position = maze.entrance;
		} else {
			player.position = player.activeTile.position = vec2(maze.entrance);
		}
		mazeBuffer.addActiveTile(player.activeTile);
		
		// Create an active tile for the finish flag
		var finishTile = new Tily.ActiveTile(maze.exit.x, maze.exit.y, 2),
			finishTileLayer = new Tily.ActiveTileLayer(finishTile, finishTile);
		finishTileLayer.foreground = "red";
		finishTileLayer.offset = vec2(0, 0.1);
		finishTileLayer.text = String.fromCharCode(parseInt("2691", 16));
		finishTile.addLayer(finishTileLayer);
		mazeBuffer.addActiveTile(finishTile);
		
		// Activate the buffer
		tily.activateBuffer(mazeBuffer, { time: 0.5 });
	}
	initialise();
	
	// Update the game
	function update(target) {
		var direction = vec2(),
			newPosition = null;
		
		// Don't move if already moving
		if (player.moving) { return; }
		
		// Don't move if the target position is the same as the player's current position
		if (vec2.eq(target, player.position)) { return; }
		
		// Don't move if the player has already reached the exit
		if (vec2.eq(player.position, maze.exit)) { return; }
		
		// Player can only move along the x or y axis
		if (target.x != player.position.x && target.y != player.position.y) { return; }
		
		// Get the direction of movement
		if (target.x < player.position.x) { direction.x = -1; }
		if (target.x > player.position.x) { direction.x = 1; }
		if (target.y < player.position.y) { direction.y = -1; }
		if (target.y > player.position.y) { direction.y = 1; }
		
		// Make sure the new position isn't a wall
		newPosition = vec2.add(player.position, direction);
		if (maze.tiles[newPosition.x][newPosition.y] == 1) { return; }
		
		// Make sure the new position is within the maze boundaries
		if (
			newPosition.x < 0 || newPosition.x >= maze.width ||
			newPosition.y < 0 || newPosition.y >= maze.height
		) { return; }
		
		// Move the player and recurse
		player.moving = true;
		player.activeTile.animateOffset(direction.x, direction.y, { time: 0.1 }).then(function() {
			player.activeTile.position = newPosition;
			player.activeTile.offset = vec2();
			player.position = newPosition;
			player.moving = false;
			
			// Check if player has reached the exit
			if (vec2.eq(newPosition, maze.exit)) {
				tily.activeBuffer.activeTiles[1].animateOpacity(0, { time: 0.5 });
				tily.activeBuffer.activeTiles[1].animateScale(2, 2, { time: 0.5 });
				setTimeout(initialise, 500);
			} else {
				update(target);
			}
		});
		
		// Move the camera to follow the player
		tily.activeBuffer.moveOffset(newPosition.x, newPosition.y, {
			time: 0.5,
			easeFunction: function(a, b, i) {
				var c = function(x, a) {
					var xa = Math.pow(x, a);
					return xa / (xa + Math.pow(1 - x, a));
				};
				return a + (b - a) * c(i, 2);
			}
		});
	}
});

</script>
<style>

#tily {
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
}

</style>
</head>
<body>
	<canvas id="tily"></canvas>
</body>
</html>
