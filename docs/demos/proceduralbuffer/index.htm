<!DOCTYPE html>
<html lang="en">
<head>
<title>Procedural Buffer Demo</title>
<meta charset="UTF-8">
<meta name="viewport" content="user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1">
<meta name="apple-mobile-web-app-capable" content="yes">
<script src="https://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js"></script>
<script src="https://rawgit.com/basementuniverse/tily/master/tily.min.js"></script>

<!-- Used by local cell generator, can be removed if using the server -->
<script src="local/alea.js"></script>
<script src="local/simplex-noise.js"></script>
<script src="local/generatecelldata.js"></script>

<script>

WebFontConfig = {
	custom: {
		urls: ["fonts/scenery_icons.css"],
		families: ["scenery_icons"]
	},
	active: function() {
		var tily = new Tily.Main(document.querySelector("#tily")),
			hammer = new Hammer.Manager(document, { recognizers: [
				[Hammer.Pan],
				[Hammer.Pinch]
			] }),
			dragStart = null,
			pinchStart = null;
		
		// Handle input events
		hammer.on("panstart", function(e) {
			if (!tily.activeBuffer) { return; }
			var p = vec2.mul(vec2(e.center.x, e.center.y), window.devicePixelRatio);
			dragStart = vec2.add(tily.activeBuffer.offsetPixels, p);
		});
		hammer.on("panend", function(e) {
			dragStart = null;
		});
		hammer.on("pan", function(e) {
			if (!tily.activeBuffer || !dragStart) { return; }
			var p = vec2.mul(vec2(e.center.x, e.center.y), window.devicePixelRatio);
			tily.activeBuffer.moveOffset(dragStart.x - p.x, dragStart.y - p.y, { unit: "px" });
		});
		hammer.on("pinchstart", function(e) {
			if (!tily.activeBuffer) { return; }
			pinchStart = tily.activeBuffer.scale;
		});
		hammer.on("pinchend", function(e) {
			pinchStart = null;
		});
		hammer.on("pinch", function(e) {
			if (!tily.activeBuffer) { return; }
			tily.activeBuffer.zoom(pinchStart / e.scale);
		});
		window.addEventListener("wheel", function(e) {
			if (!tily.activeBuffer) { return; }
			tily.activeBuffer.zoom(tily.activeBuffer.scale + (e.deltaY > 0 ? 1 : -1), { time: 0.1 });
		});
		
		// Create a cell buffer where the cell function requests cells from a server
		var cellBuffer = new Tily.CellBuffer({
				cellWidth: 16,
				cellHeight: 16
			});
		
		// This is a cell function that connects to a server
		var serverCellFunction = function(cellBuffer, x, y, resolve, reject) {
			var xhr = new XMLHttpRequest();
			xhr.open("GET", "http://127.0.0.1:1337/?x=" + x + "&y=" + y, true);
			xhr.onload = function(e) {
				if (this.status == 200) {
					var cell = Tily.Cell.deserialize(cellBuffer, this.response);
					resolve(cell);
				} else {
					reject("Server returned " + this.status);
				}
			};
			xhr.send();
		};
		
		// This is a cell function that generates cells synchronously on the client
		// Note: this function is basically a copy of the server, so it generates a Tily.Cell
		// instance, then serializes it and returns a string which is deserialized here. Kind of
		// pointless doing all that extra work, but it's just to demonstrate how a cell server
		// would work without actually having to run a server.
		var localCellFunction = function(cellBuffer, x, y, resolve, reject) {
			var data = generateCellData(x, y),
				cell = Tily.Cell.deserialize(cellBuffer, data);
			resolve(cell);
		};
		
		// Set the cell function and activate the buffer
		cellBuffer.options.cellFunction = localCellFunction;
		tily.activateBuffer(cellBuffer);
	}
};

</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script>
<style>

#tily {
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
}

</style>
</head>
<body>
	<canvas id="tily"></canvas>
</body>
</html>
